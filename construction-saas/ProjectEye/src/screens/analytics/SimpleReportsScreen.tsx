import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  Alert,
} from 'react-native';
import * as Clipboard from 'expo-clipboard';
import { Ionicons } from '@expo/vector-icons';
import { useAnalyticsStore } from '../../store/analytics.store';
import * as Sharing from 'expo-sharing';

interface SimpleReportsScreenProps {
  route: {
    params: {
      projectId: string;
    };
  };
}

export const SimpleReportsScreen: React.FC<SimpleReportsScreenProps> = ({ route }) => {
  const { projectId } = route.params;
  const [generating, setGenerating] = useState<string | null>(null);
  
  const { dashboardData, fetchDashboardData, isLoading } = useAnalyticsStore();

  useEffect(() => {
    if (!dashboardData) {
      fetchDashboardData(projectId);
    }
  }, [projectId]);

  const generateReport = async (type: 'owner' | 'contractor' | 'daily' | 'weekly') => {
    if (!dashboardData) return;
    
    setGenerating(type);
    
    try {
      const report = getReportContent(type);
      await Clipboard.setStringAsync(report);
      
      Alert.alert(
        'Report Ready! üì±',
        'Report copied to clipboard. You can now paste it in WhatsApp, SMS, or Email.',
        [
          { text: 'OK' },
          { 
            text: 'Share Report', 
            onPress: () => shareReport(report, type)
          }
        ]
      );
    } catch (error) {
      Alert.alert('Error', 'Failed to generate report');
    } finally {
      setGenerating(null);
    }
  };

  const shareReport = async (report: string, type: string) => {
    try {
      if (await Sharing.isAvailableAsync()) {
        // Create a simple text file
        const reportTitle = `${dashboardData?.project.name}_${type}_report.txt`;
        // For simplicity, we'll just show the report text
        Alert.alert('Share Report', report);
      }
    } catch (error) {
      console.error('Share error:', error);
    }
  };

  const getReportContent = (type: 'owner' | 'contractor' | 'daily' | 'weekly'): string => {
    if (!dashboardData) return '';
    
    const project = dashboardData.project;
    const metrics = dashboardData.metrics;
    const healthScore = getProjectHealthScore();
    const budgetUsed = metrics.budgetUtilization;
    const workComplete = Math.round((metrics.completedMilestones / metrics.totalMilestones) * 100);
    const today = new Date().toLocaleDateString('en-IN');

    switch (type) {
      case 'owner':
        return `üèóÔ∏è *PROJECT STATUS REPORT*
üìÖ Date: ${today}

*${project.name}*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä *OVERALL HEALTH: ${healthScore}/100*
${healthScore >= 80 ? 'üü¢ EXCELLENT' : healthScore >= 60 ? 'üü° GOOD' : 'üî¥ NEEDS ATTENTION'}

üí∞ *FINANCIAL STATUS:*
‚Ä¢ Total Budget: ‚Çπ${(project.budget / 100000).toFixed(1)} Lakhs
‚Ä¢ Amount Spent: ‚Çπ${(metrics.totalSpent / 100000).toFixed(1)} Lakhs
‚Ä¢ Budget Used: ${budgetUsed}%
‚Ä¢ Remaining: ‚Çπ${((project.budget - metrics.totalSpent) / 100000).toFixed(1)} Lakhs
${budgetUsed <= 70 ? 'üü¢ On Track' : budgetUsed <= 85 ? 'üü° Monitor Closely' : 'üî¥ Over Budget Alert'}

üéØ *WORK PROGRESS:*
‚Ä¢ Project Completion: ${workComplete}%
‚Ä¢ Milestones Completed: ${metrics.completedMilestones}/${metrics.totalMilestones}
‚Ä¢ Work Updates: ${metrics.progressUpdates} this month
${workComplete >= 80 ? 'üü¢ On Schedule' : workComplete >= 60 ? 'üü° Minor Delays' : 'üî¥ Significant Delays'}

üë• *TEAM STATUS:*
‚Ä¢ Team Size: ${metrics.teamMembers} members
‚Ä¢ Daily Updates: Regular
‚Ä¢ Pending Approvals: ${metrics.pendingApprovals}

üìà *RECOMMENDATION:*
${healthScore >= 80 ? '‚úÖ Project is running smoothly. Continue current approach.' : 
  healthScore >= 60 ? '‚ö†Ô∏è Monitor budget and timeline closely. Minor adjustments needed.' : 
  'üö® Immediate attention required. Review budget and timeline.'}

üì± Generated by ProjectEye
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

      case 'contractor':
        return `üî® *CONTRACTOR REPORT*
üìÖ ${today}

*Project: ${project.name}*

üíº *PAYMENT STATUS:*
‚Ä¢ Total Work Value: ‚Çπ${(metrics.totalSpent / 100000).toFixed(1)} Lakhs
‚Ä¢ Pending Payments: ${metrics.pendingApprovals} bills
‚Ä¢ Work Completed: ${workComplete}%

üéØ *WORK STATUS:*
‚Ä¢ Current Milestone: ${metrics.totalMilestones - metrics.completedMilestones} pending
‚Ä¢ Daily Progress: Active
‚Ä¢ Team Working: ${metrics.teamMembers} people

üìã *NEXT ACTIONS:*
‚Ä¢ Submit daily work photos
‚Ä¢ Complete pending milestones
‚Ä¢ Maintain quality standards

üì± ProjectEye Report`;

      case 'daily':
        return `üìÖ *DAILY WORK REPORT*
Date: ${today}

*${project.name}*

üë∑ *TODAY'S WORK:*
‚Ä¢ Team Present: ${metrics.teamMembers} members
‚Ä¢ Work Status: In Progress
‚Ä¢ Weather: Good

üí∞ *EXPENSES TODAY:*
‚Ä¢ Materials: ‚Çπ_____
‚Ä¢ Labor: ‚Çπ_____
‚Ä¢ Other: ‚Çπ_____

üì∏ *PHOTOS:* Uploaded
üéØ *TOMORROW'S PLAN:* Continue work

üì± Sent via ProjectEye`;

      case 'weekly':
        return `üìä *WEEKLY SUMMARY*
Week ending: ${today}

*${project.name}*

üéØ *WEEK'S PROGRESS:*
‚Ä¢ Work Completed: ${workComplete}%
‚Ä¢ Budget Used: ${budgetUsed}%
‚Ä¢ Team Performance: Good

üí∞ *WEEKLY EXPENSES:*
‚Ä¢ Total Spent: ‚Çπ${(metrics.totalSpent / 100000).toFixed(1)} Lakhs
‚Ä¢ Major Items: Materials, Labor

üìà *NEXT WEEK TARGET:*
‚Ä¢ Complete pending milestones
‚Ä¢ Monitor budget usage
‚Ä¢ Maintain work quality

üö® *ALERTS:*
${budgetUsed > 85 ? '‚ö†Ô∏è Budget usage high' : '‚úÖ Budget on track'}
${workComplete < 60 ? '‚ö†Ô∏è Work progress slow' : '‚úÖ Good progress'}

üì± ProjectEye Weekly Report`;

      default:
        return '';
    }
  };

  const getProjectHealthScore = () => {
    if (!dashboardData) return 0;
    
    const budgetScore = Math.max(0, 100 - dashboardData.metrics.budgetUtilization);
    const milestoneScore = dashboardData.metrics.totalMilestones > 0 
      ? (dashboardData.metrics.completedMilestones / dashboardData.metrics.totalMilestones) * 100 
      : 100;
    const progressScore = dashboardData.metrics.progressUpdates > 0 ? 100 : 50;
    
    return Math.round((budgetScore * 0.4 + milestoneScore * 0.4 + progressScore * 0.2));
  };

  const renderReportCard = (
    title: string,
    description: string,
    type: 'owner' | 'contractor' | 'daily' | 'weekly',
    icon: keyof typeof Ionicons.glyphMap,
    color: string
  ) => (
    <TouchableOpacity 
      style={[styles.reportCard, { borderLeftColor: color }]}
      onPress={() => generateReport(type)}
      disabled={generating !== null}
    >
      <View style={styles.reportCardHeader}>
        <View style={[styles.reportCardIcon, { backgroundColor: `${color}20` }]}>
          <Ionicons name={icon} size={28} color={color} />
        </View>
        <View style={styles.reportCardTitles}>
          <Text style={styles.reportCardTitle}>{title}</Text>
        </View>
      </View>
      
      <Text style={styles.reportCardDescription}>{description}</Text>
      
      <View style={styles.reportCardFooter}>
        {generating === type ? (
          <View style={styles.generatingContainer}>
            <Text style={styles.generatingText}>Preparing Report...</Text>
          </View>
        ) : (
          <View style={styles.shareOptions}>
            <View style={styles.shareOption}>
              <Ionicons name="logo-whatsapp" size={16} color="#25D366" />
              <Text style={styles.shareOptionText}>WhatsApp</Text>
            </View>
            <View style={styles.shareOption}>
              <Ionicons name="mail" size={16} color="#3B82F6" />
              <Text style={styles.shareOptionText}>Email</Text>
            </View>
            <View style={styles.shareOption}>
              <Ionicons name="chatbubbles" size={16} color="#6366F1" />
              <Text style={styles.shareOptionText}>SMS</Text>
            </View>
          </View>
        )}
      </View>
    </TouchableOpacity>
  );

  if (isLoading) {
    return (
      <View style={styles.loadingContainer}>
        <Text style={styles.loadingText}>Loading Reports...</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Project Reports</Text>
        <Text style={styles.headerSubtitle}>Simple reports for WhatsApp, SMS & Email</Text>
      </View>

      <View style={styles.reportsContainer}>
        {renderReportCard(
          'Owner Report',
          'Complete project status for project owners and investors',
          'owner',
          'business',
          '#3B82F6'
        )}

        {renderReportCard(
          'Contractor Report',
          'Work progress and payment status for contractors',
          'contractor',
          'hammer',
          '#10B981'
        )}

        {renderReportCard(
          'Daily Work Report',
          'Daily work summary for team communication',
          'daily',
          'today',
          '#F59E0B'
        )}

        {renderReportCard(
          'Weekly Summary',
          'Weekly progress summary for stakeholders',
          'weekly',
          'calendar',
          '#8B5CF6'
        )}
      </View>

      <View style={styles.tipsContainer}>
        <Text style={styles.tipsTitle}>üí° Quick Tips</Text>
        <Text style={styles.tipsText}>‚Ä¢ Reports are automatically copied to clipboard</Text>
        <Text style={styles.tipsText}>‚Ä¢ Perfect for WhatsApp groups and SMS</Text>
        <Text style={styles.tipsText}>‚Ä¢ Share with team members instantly</Text>
        <Text style={styles.tipsText}>‚Ä¢ Professional format with emojis</Text>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8FAFC',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#374151',
  },
  
  header: {
    backgroundColor: '#FFFFFF',
    padding: 20,
    marginBottom: 16,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 8,
  },
  
  reportsContainer: {
    paddingHorizontal: 16,
  },
  reportCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    borderLeftWidth: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 3,
  },
  reportCardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  reportCardIcon: {
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  reportCardTitles: {
    flex: 1,
  },
  reportCardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  reportCardDescription: {
    fontSize: 14,
    color: '#6B7280',
    lineHeight: 20,
    marginBottom: 16,
  },
  reportCardFooter: {
    minHeight: 40,
  },
  generatingContainer: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  generatingText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#3B82F6',
  },
  shareOptions: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  shareOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 6,
    backgroundColor: '#F8FAFC',
    borderRadius: 8,
  },
  shareOptionText: {
    fontSize: 12,
    color: '#6B7280',
    marginLeft: 4,
    fontWeight: '500',
  },
  
  tipsContainer: {
    backgroundColor: '#FFFFFF',
    margin: 16,
    padding: 16,
    borderRadius: 12,
    borderLeftWidth: 4,
    borderLeftColor: '#10B981',
  },
  tipsTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 12,
  },
  tipsText: {
    fontSize: 14,
    color: '#6B7280',
    marginBottom: 6,
    lineHeight: 20,
  },
});